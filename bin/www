require('dotenv').config({
    path: `.env.${process.env.NODE_ENV}`,
})
const http = require('http');
const app = require('../index');
const { logger } = require('../config/logger');

const { PORT, HOST } = process.env;

const server = http.createServer(app);

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        return val
    } 
    if (port > 0) {
        return port
    }
    return false
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = typeof port === 'string'? `Pipe ${port}`: `Port: ${port}`;
    switch(error.code) {
        case 'EACCES': 
            logger.error(`${bind} requires elevated privileges`);
            process.exit(1)
        case 'EADDRINUSE': 
            logger.error(`${bind} is already in use`);
            process.exit(1);
        default: 
            logger.error(`Default error: ${error}`)
            throw error;

    }
}

const port = normalizePort(PORT || '3000');
const host = HOST || `0.0.0.0`;
// Listen on provider port host.
server.listen(port, host);
server.on('error', onError);
server.on('listening', () => {
    logger.info(`Server started on ${new Date()}`);
    logger.info(`server is running at http://${server.address().address}:${server.address().port}`)
})

server.on('unhandleRejection', (err, promise) => {
    logger.error('Unhandled rejection (Promise:',
    promise,
    ', reason: ',
    err,
    ').', 
    )
})

server.on('uncaughtException', (err, reason) => {
    logger.error('Unhandled Exception', reason, '(error',
    err,
    ').', 
    )
})